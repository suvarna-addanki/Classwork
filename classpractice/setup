/*class Hamster{

    constructor(name){
        this.owner = "";
        this.name = name;
        this.price = 15;
    }

    wheelRun(){
        console.log('squeak squeak')
    }

    eatFood(){
        console.log('nibble nibble')
    }

    getPrice(){
        return this.price
    }
}

const hamster1 = new Hamster('Suvarna')
console.log(hamster1)


class Person {
    constructor(name){
        this.name = name
        this.age = 0;
        this.height = 0;
        this.weight = 0;
        this.mood = 0;
        this.hamsters = [];
        this.bankAccount = 0;
    }

    getName(){
        return(console.log(this.name))
    }

    getAge(){
        return this.age
    }

    getWeight(){
        return this.weight
    }

    greet(){
        console.log('Hello My name is ' + this.name)
    }
    eat(){
        this.weight++
        this.mood++
    }
    exercise(){
        this.weight--
    }
    ageUp(){
        this.age++
        this.height++
        this.weight++
        this.mood--
        this.bankAccount += 10
    }

    buyHamster(newHamster){
        this.hamster.push(newHamster)
        this.mood +=10
        this.bankAccount -= newHamster.getPrice()


    }
}

const personNew = new Person('John')
console.log(personNew)
personNew.getName('Suvarna')
personNew.getAge()

const timmy
*/


    
        


// simple Dinner class that expects three parameters for setting up three properties 
class Dinner { 
  // the three parameters can be named whatever we like, but why not give them the same name as the property?
  constructor(appetizer, entree, dessert) {
​
    // when we say "this.appetizer" we are referring to a property of the current instance/object called "appetizer"
    // when we say " = appetizer" we are taking the parameter value and assigning it to the property of the same name
    this.appetizer = appetizer
    this.entree = entree
    this.dessert = dessert
  }
}
​
// the Chef class is a factory of Dinner. We create a factory object/instance (ramsey) from it.
// this special object/instance (ramsey) will be in charge of creating dinners for us. 
class Chef {
​
  // this is a special method that creates objects/instances of Dinner
  // we can create other objects (dinners) from within this one (chef)
  makeDinner(app, ent, des) {
    return new Dinner(app, ent, des)
  }
}
​
// we first create the factory object (the chef)
const ramsey = new Chef()
​
// and let the factory (the chef) do the work of making dinners 
ramsey.makeDinner("fries", "pizza", "ice cream")
​
// how we make dinners without a factory (the chef)
// const dinner1 = new Dinner("fries", "pizza", "ice cream")
// const dinner2 = new Dinner("fish sticks", "kimchi", "flan") // returns the new object 
​